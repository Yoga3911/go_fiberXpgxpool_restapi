// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package models

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (
  category
) VALUES (
  $1
)
RETURNING id, category
`

func (q *Queries) CreateCategory(ctx context.Context, category string) (*Category, error) {
	row := q.queryRow(ctx, q.createCategoryStmt, createCategory, category)
	var i Category
	err := row.Scan(&i.ID, &i.Category)
	return &i, err
}

const createFilm = `-- name: CreateFilm :one
INSERT INTO film (
  name, title, category_id
) VALUES (
  $1, $2, $3
)
RETURNING id, name, title, category_id
`

type CreateFilmParams struct {
	Name       string `json:"name"`
	Title      string `json:"title"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) CreateFilm(ctx context.Context, arg *CreateFilmParams) (*Film, error) {
	row := q.queryRow(ctx, q.createFilmStmt, createFilm, arg.Name, arg.Title, arg.CategoryID)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.CategoryID,
	)
	return &i, err
}

const deleteFilm = `-- name: DeleteFilm :exec
DELETE FROM film
WHERE id = $1
`

func (q *Queries) DeleteFilm(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteFilmStmt, deleteFilm, id)
	return err
}

const getAllCategory = `-- name: GetAllCategory :many
SELECT id, category FROM category
`

func (q *Queries) GetAllCategory(ctx context.Context) ([]*Category, error) {
	rows, err := q.query(ctx, q.getAllCategoryStmt, getAllCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFilm = `-- name: GetAllFilm :many
SELECT id, name, title, category_id FROM film
`

func (q *Queries) GetAllFilm(ctx context.Context) ([]*Film, error) {
	rows, err := q.query(ctx, q.getAllFilmStmt, getAllFilm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilm = `-- name: GetFilm :one
SELECT id, name, title, category_id FROM film
WHERE id = $1
`

func (q *Queries) GetFilm(ctx context.Context, id int64) (*Film, error) {
	row := q.queryRow(ctx, q.getFilmStmt, getFilm, id)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.CategoryID,
	)
	return &i, err
}

const updateFilm = `-- name: UpdateFilm :exec
UPDATE film 
SET name = $2, title = $3, category_id = $4
WHERE id = $1
`

type UpdateFilmParams struct {
	ID         int64  `json:"id"`
	Name       string `json:"name"`
	Title      string `json:"title"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) UpdateFilm(ctx context.Context, arg *UpdateFilmParams) error {
	_, err := q.exec(ctx, q.updateFilmStmt, updateFilm,
		arg.ID,
		arg.Name,
		arg.Title,
		arg.CategoryID,
	)
	return err
}
